# -*- coding: utf-8 -*-
"""Urdu-poetry-generation-using-Bigrams.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L2UxkasAJTluO4aa7lUXbUI-5uB1b0S2
"""

import nltk
import spacy
unlp = spacy.blank('ur')

def readCorpus(fileName):
	corpus = []
	file = open(fileName, "r")

	for word in file.read().split():
		corpus.append(word)

	file.close()
	return corpus

def generateBigram(data):
	bigrams = []
	bigram_freqs = {}
	unigram_freqs = {}
	nbyn = {}

	for i in range(len(data)):
		if i < len(data) - 1:

			bigrams.append((data[i], data[i + 1]))

			if (data[i], data[i+1]) in bigram_freqs:
				bigram_freqs[(data[i], data[i + 1])] += 1
			else:
				bigram_freqs[(data[i], data[i + 1])] = 1

		if data[i] in unigram_freqs:
			unigram_freqs[data[i]] += 1
		else:
			unigram_freqs[data[i]] = 1

	return bigrams, unigram_freqs, bigram_freqs

def SimpleBigram(bigrams, unigram_freqs, bigram_freqs):

	bigramProbs = {}
	for bigram in bigrams:
		word1 = bigram[0]
		word2 = bigram[1]
		
		bigramProbs[bigram] = (bigram_freqs.get(bigram))/(unigram_freqs.get(word1))

	
	# print('Bigram' + '\t' + 'Frequency' + '\t' + 'Probability' + '\n')

	# for bigrams in bigrams:
	# 	print(str(bigrams) + ' : ' + str(bigram_freqs[bigrams])
	# 			   + ' : ' + str(bigramProbs[bigrams]) + '\n')

	
	return bigramProbs

def LaplaceSmoothing(bigrams, unigram_freqs, bigram_freqs):

	bigramProbs = {}
	adjustedFrequencys = {}


	for bigram in bigrams:
		word1 = bigram[0]
		word2 = bigram[1]
		bigramProbs[bigram] = (bigram_freqs.get(bigram) + 1)/(unigram_freqs.get(word1) + len(unigram_freqs))
		adjustedFrequencys[bigram] = (bigram_freqs[bigram] + 1) * unigram_freqs[word1] / (unigram_freqs[word1] + len(unigram_freqs))

	# print('Bigram' + '\t' + 'Frequency' + '\t' + 'Probability' + '\n')

	# for bigrams in bigrams:
	# 	print(str(bigrams) + ' : ' + str(bigram_freqs[bigrams])
	# 			   + ' : ' + str(bigramProbs[bigrams]) + '\n')

	return bigramProbs, adjustedFrequencys

##########################################                Generating Poetry Using Bigram Model                ########################
import random
def generatePoetryBigram(unigrams : list , bigrams : list , cdist):

  last_word = str()
  last_word_set = False
  word = ""
  
  # Loop to Iterate over the Stanzas of the poem
  for i in range(0,3):
    number_of_words = random.randint(7,10)  # Randomly generating the number of words to be generated for this stanza
    # Loop to iterate over every verse of the stanza
    for j in range(0,4):
      sentence = ""           #Initializing an empty sentence
      
      while True :            #Randomly chooses a word to start the verse, if the length of chosen word is less than 1, chooses again
        word = random.choice(unigrams)
        if len(word) > 1:
          break

      sentence = sentence + " " + str(word)     # appends the to the sentence
      # Loop to iterate over and generate every word in a verse
      for k in range(0,number_of_words):
          
        #### code to choose the next word on the basis of current word

        # generates a dict, keeping the count of next possible words occurences

        temp_words = dict()
        for tuples in bigrams:
          if str(tuples[0]) == str(word):
            if len(str(tuples[1])) <= 1:
              continue
            if tuples[1] in temp_words:
              temp_words[tuples[1]] += 1
            else:
              temp_words[tuples[1]] = 1
        

        # chooses the word that occurs the most number of times next to the current word, if no next word, randomly selects next word
        if len(temp_words) > 0 :
            while True :
              word = random.choice(list(temp_words.keys()))
              if len(word) > 1:
               break
        else:
            while True :
              word = random.choice(unigrams)
              if len(word) > 1:
                break

        #######################################

        # when the end of sentence reaches, checks if there is a designated last word assigned and proceeds accordingly i.e choosing the designated last word or current word
        if k == (number_of_words - 1 ) and last_word_set == True and j != (2):
          sentence = sentence + " " + last_word
        else:
          sentence = sentence + " " +str(word)

        # if the current word is last word and no last word has been selected, chooses a last_word
        if k == (number_of_words - 1) and last_word_set == False:
          last_word_set = True
          last_word = str(word)
      #prints the sentence
      print(sentence)
    
    #prints empty line
    print()

fileName = 'ghalib.txt'  #enter corpus file name , here I have dataset for 3 Urdu poets
# Ghalib 
data = readCorpus(fileName)
listOfBigrams, unigramFreqs, bigramFreqs = generateBigram(data)
bigramProb = SimpleBigram(listOfBigrams, unigramFreqs, bigramFreqs)
bigramLaplace, adjustedFreqs = LaplaceSmoothing(listOfBigrams, unigramFreqs, bigramFreqs)
unigrams = list(unigramFreqs.keys())
generatePoetryBigram(unigrams, listOfBigrams , adjustedFreqs)

fileName = 'faiz.txt'  #enter corpus file name , here I have dataset for 3 Urdu poets
#  Faiz 
data = readCorpus(fileName)
listOfBigrams, unigramFreqs, bigramFreqs = generateBigram(data)
bigramProb = SimpleBigram(listOfBigrams, unigramFreqs, bigramFreqs)
bigramLaplace, adjustedFreqs = LaplaceSmoothing(listOfBigrams, unigramFreqs, bigramFreqs)
unigrams = list(unigramFreqs.keys())
generatePoetryBigram(unigrams, listOfBigrams , adjustedFreqs)

fileName = 'iqbal.txt'  #enter corpus file name , here I have dataset for 3 Urdu poets
# Iqbal 
data = readCorpus(fileName)
listOfBigrams, unigramFreqs, bigramFreqs = generateBigram(data)
bigramProb = SimpleBigram(listOfBigrams, unigramFreqs, bigramFreqs)
bigramLaplace, adjustedFreqs = LaplaceSmoothing(listOfBigrams, unigramFreqs, bigramFreqs)
unigrams = list(unigramFreqs.keys())
generatePoetryBigram(unigrams, listOfBigrams , adjustedFreqs)
